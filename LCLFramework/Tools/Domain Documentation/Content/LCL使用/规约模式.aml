<?xml version="1.0" encoding="utf-8"?>
<topic id="b21ec496-3470-41d8-b959-5dd8ff43db56" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
      <section address="DDD">
            <title>规约模式</title>
            <content>
                <para>规约模式就是DDD引入用来解决以上问题的一种特殊的模式。规约是一种布尔断言，
                它表述了给定的对象是否满足当前约定的语义。</para>
                <para>
                为了实现复合断言，通常在设计中引入复合规约对象。这样做的好处是，
                可以充分利用规约的复合来实现复杂的规约组合以及规约树的遍历。不仅如此，
                在.NET 3.5引入Expression Tree以后，规约将有其特定的实现方式，这个我们在后面讨论。
                以下是一个经典的实现方式，注意ICompositeSpecification接口，
                它包含两个属性：Left和Right，ICompositeSpecification是继承于ISpecification接口的，
                而Left和Right本身也是ISpecification类型，于是，整个Specification的结构就可以看成是一种树状结构。
                </para>
              <mediaLink>
                    <caption>仓库UML</caption>
                    <image xlink:href="规约模式"  width="432px;" height="386px" />
                </mediaLink>
            </content>
        </section>
         <section address="demo">
            <title>代码示例</title>
            <content>
                <code language="cs">
<![CDATA[
    /// <summary>
    ///  根据关键字进行查询
    ///  Linq模糊查询 http://www.cnblogs.com/cracker/archive/2011/02/07/1949669.html
    /// </summary>
    public class KeyMaintenanceSpecification : Specification<User>
    {
        string _keyword = "";
        string _dateFlg = "";
        public KeyMaintenanceSpecification(string keyword, string dateFlg)
        {
            _keyword = keyword;
            _dateFlg = dateFlg;
        }
        public override Expression<Func<User, bool>> GetExpression()
        {
            Expression<Func<User, bool>> spec = c => c.Name.IndexOf(_keyword) != -1; ;
            return spec;
        }
    }
    /// <summary>
    ///  根据时间进行查询
    /// </summary>
    public class DateMaintenanceSpecification : Specification<User>
    {
        string _dateFlg = "";
        DateTime? _fromDate;
        DateTime? _toDate;
        public DateMaintenanceSpecification(DateTime? fromDate, DateTime? toDate, string dateFlg)
        {
            _fromDate = fromDate ?? DateTime.MinValue;
            _toDate = toDate ?? DateTime.MaxValue;
            _dateFlg = dateFlg;
        }
        public override Expression<Func<User, bool>> GetExpression()
        {
            return c => c.AddDate >= _fromDate && c.AddDate <= _toDate;
        }
    }
    [TestMethod()]
    public void SpecClassTest()
    {
        var spec = new KeyMaintenanceSpecification("username1", "Name")
            .And(new KeyMaintenanceSpecification("admin", "Name"))
            .And(new DateMaintenanceSpecification(DateTime.Now, DateTime.Now.AddMonths(1), "AddDate"));
    }
      [TestMethod()]
        public void SpecEvalTest()
        {
            ISpecification<User> spec = Specification<User>.Eval(p => p.Name == "" && p.IsDelete == true);
        }
]]]]>
                </code>
               <alert class="note">
                <para>规约模式，是一种固定的业务模式。</para>
            </alert>
            </content>
        </section>
  </developerConceptualDocument>
</topic>