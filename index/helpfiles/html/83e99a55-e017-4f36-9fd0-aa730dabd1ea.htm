<html><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>并发处理</title><meta name="Language" content="zh-cn" /><meta name="Microsoft.Help.Id" content="83e99a55-e017-4f36-9fd0-aa730dabd1ea" /><meta name="Description" content="并发分悲观并发和乐观并发。 悲观并发：比如有两个用户A,B，同时登录系统修改一个文档，如果A先进入修改，则系统会把该文档锁住， B就没办法打开了，只有等A修改完，完全退出的时候B才能进入修改。 乐观并发：同上面的例子，A,B两个用户同时登录，如果A先进入修改紧跟着B也进入了。A修改文档的同时B也在修改。 如果在A保存之后B再保存他的修改， 此时系统检测到数据库中文档记录与B刚进入时不一致，B保存时会抛出异常，修改失败。" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><link rel="stylesheet" type="text/css" href="../styles/Presentation.css" /><script type="text/javascript" src="../scripts/EventUtilities.js"> </script><script type="text/javascript" src="../scripts/SplitScreen.js"> </script><script type="text/javascript" src="../scripts/Dropdown.js"> </script><script type="text/javascript" src="../scripts/script_manifold.js"> </script><script type="text/javascript" src="../scripts/script_feedBack.js"> </script><script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script><script type="text/javascript" src="../scripts/CommonUtilities.js"> </script><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script></head><body><input type="hidden" id="userDataCache" class="userDataStyle" /><input type="hidden" id="hiddenScrollOffset" /><img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="Collapse image" title="Collapse image" /><img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="Expand Image" title="Expand Image" /><img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" /><img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" /><img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" /><img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" /><img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" alt="Copy image" title="Copy image" /><img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" alt="CopyHover image" title="CopyHover image" /><div id="header"><table id="topTable" cellspacing="0" cellpadding="0"><tr><td><span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0"><img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">Collapse All</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">Expand All</label> </span></td></tr></table><div id="devlangsMenu"><input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="CSharpCheckbox">C#</label><br /></div><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">LCL User Guide</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">并发处理</span></td></tr><tr id="headerTableRow3"><td align="left"><span id="headfeedbackarea" class="feedbackhead"><a href="#" onclick="javascript:SubmitFeedback('minguiluo@163.com','LCL User Guide','','1.0.0.0','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback'); return false;">Send Feedback</a></span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" id="headerBottom"><img id="headerBottomImage" style="display: none;" src="../icons/gradient.gif" /></td></tr></table></div><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" /><span style="color: DarkGray">LCL User Guide </span><a name="DDD"> </a><h1 class="heading"><span onclick="ExpandCollapse(sectionToggleID0EAAAA)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggleID0EAAAA, event)" tabindex="0"><img id="sectionToggleID0EAAAA" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />什么是并发？</span></h1><div id="sectionSectionID0EAAAA" class="section" name="collapseableSection"><p>
          并发分悲观并发和乐观并发。
          悲观并发：比如有两个用户A,B，同时登录系统修改一个文档，如果A先进入修改，则系统会把该文档锁住，
          B就没办法打开了，只有等A修改完，完全退出的时候B才能进入修改。
          乐观并发：同上面的例子，A,B两个用户同时登录，如果A先进入修改紧跟着B也进入了。A修改文档的同时B也在修改。
          如果在A保存之后B再保存他的修改，
          此时系统检测到数据库中文档记录与B刚进入时不一致，B保存时会抛出异常，修改失败。
        </p><p>
          Entity Framework不支持悲观并发，只支持乐观并发。
          如果要对某一个表做并发处理，就在该表中加一条Timestamp类型的字段。注意，一张表中只能有一个Timestamp的字段。
          Data Annotations中用Timestamp来标识设置并发控制字段，标识为Timestamp的字段必需为byte[]类型。
        </p><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="Copy image" title="Copy image" src="../icons/copycode.gif" />Copy</span></th></tr><tr><td colspan="2"><pre xml:space="preserve">publicclass Person   
{       
publicint PersonId { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }        
publicint SocialSecurityNumber { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }        
publicstring FirstName { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }        
publicstring LastName { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }        
[Timestamp]        
publicbyte[] RowVersion { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }    
}</pre></td></tr></table></span></div><p>
          Fluent API用IsRowVersion方法
          <div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="Copy image" title="Copy image" src="../icons/copycode.gif" />Copy</span></th></tr><tr><td colspan="2"><pre xml:space="preserve">modelBuilder.Entity().Property(p =&lt; p.RowVersion).IsRowVersion();</pre></td></tr></table></span></div>
          我们看到生成的数据库中，RowVersion是timestamp类型。
        </p><p>
          下面我们写一段代码来测试一下：
        </p><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="Copy image" title="Copy image" src="../icons/copycode.gif" />Copy</span></th></tr><tr><td colspan="2"><pre xml:space="preserve">staticvoid Main(<span class="highlight-keyword">string</span>[] args)        
{           
<span class="highlight-keyword">var</span> person = <span class="highlight-keyword">new</span> Person            {               
FirstName = <span class="highlight-literal">"Rowan"</span>,             
LastName = <span class="highlight-literal">"Miller"</span>,             
SocialSecurityNumber = <span class="highlight-number">12345678</span>          
};        
<span class="highlight-comment">//新增一条记录，保存到数据库中</span>
<span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> con = <span class="highlight-keyword">new</span> BreakAwayContext())           
{           
  con.People.Add(person);         
  con.SaveChanges();            
}            
<span class="highlight-keyword">var</span> firContext = <span class="highlight-keyword">new</span> BreakAwayContext();       
<span class="highlight-comment">//取第一条记录,并修改一个字段：这里是修改了FirstName         </span>
<span class="highlight-comment">//先不保存var p1 = firContext.People.FirstOrDefault();         </span>
p1.FirstName = <span class="highlight-literal">"Steven"</span>;            
<span class="highlight-comment">//再创建一个Context，同样取第一条记录，修改LastName字段并保存</span>
<span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> secContext = <span class="highlight-keyword">new</span> BreakAwayContext())      
{             
   <span class="highlight-keyword">var</span> p2 = secContext.People.FirstOrDefault();   
   p2.LastName = <span class="highlight-literal">"Francis"</span>;           
   secContext.SaveChanges();        
}           
<span class="highlight-keyword">try</span>      
{         
   firContext.SaveChanges();             
   Console.WriteLine(<span class="highlight-literal">" 保存成功"</span>);   
}           
<span class="highlight-keyword">catch</span> (DbUpdateConcurrencyException ex)     
{              
   Console.WriteLine(ex.Entries.First().Entity.GetType().Name + <span class="highlight-literal">" 保存失败"</span>);       
}          
  Console.Read();    
}</pre></td></tr></table></span></div><div class="alert"><table><tr><th><img src="../icons/alert_note.gif" title="Note" /> <b>Note</b></th></tr><tr><td><p>
            上面我们实例化了三个DbContext,
            第一个增加一条记录到数据库中，
            第二个修改刚增加的记录但不保存，
            然后第三个Context也取刚新增的记录并保存，
            最后再保存第二个Context，结果保存失败。
          </p></td></tr></table></div><p>
          分析EF生成的SQL语句：
        </p><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="Copy image" title="Copy image" src="../icons/copycode.gif" />Copy</span></th></tr><tr><td colspan="2"><pre xml:space="preserve">exec sp_executesql N'update [dbo].[People]<span class="highlight-keyword">set</span> [LastName] = @<span class="highlight-number">0</span><span class="highlight-keyword">where</span>
(([PersonId] = @<span class="highlight-number">1</span>) and ([RowVersion] = @<span class="highlight-number">2</span>))<span class="highlight-keyword">select</span> [RowVersion]<span class="highlight-keyword">from</span> [dbo].
[People]<span class="highlight-keyword">where</span> @@ROWCOUNT &lt; <span class="highlight-number">0</span> and [PersonId] = @<span class="highlight-number">1</span><span class="highlight-literal">',N'</span>@<span class="highlight-number">0</span> nvarchar(max) ,
@<span class="highlight-number">1</span> <span class="highlight-keyword">int</span>,@<span class="highlight-number">2</span> binary(<span class="highlight-number">8</span>)<span class="highlight-literal">',@0=N'</span>Francis',@<span class="highlight-number">1</span>=<span class="highlight-number">1</span>,@<span class="highlight-number">2</span>=<span class="highlight-number">0x00000000000007D1</span></pre></td></tr></table></span></div><div class="alert"><table><tr><th><img src="../icons/alert_note.gif" title="Note" /> <b>Note</b></th></tr><tr><td><p>
            可以看到，它在取对应记录的时候把RowVersion也作为筛选条件。上面例子中的secContext保存的时候，
            数据库中的RowVersion字段的值就变了，所以firContext保存的时候用原来的RowVersion取值，
            自然就取不到相应的记录而报错。
          </p></td></tr></table></div><p>
          如果我们只是要对某个字段作并发控制呢？别着急，EF也有办法。
        </p><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="Copy image" title="Copy image" src="../icons/copycode.gif" />Copy</span></th></tr><tr><td colspan="2"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Person    
{      
   publicint PersonId { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }       
   [ConcurrencyCheck]
   <span class="highlight-keyword">public</span> <span class="highlight-keyword">int</span> SocialSecurityNumber { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }      
   <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> FirstName { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }        
   <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> LastName { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }        
   <span class="highlight-keyword">public</span> <span class="highlight-keyword">byte</span>[] RowVersion { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }   
}</pre></td></tr></table></span></div><p>
          Fluent API用IsConcurrencyToken方法
        </p><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="Copy image" title="Copy image" src="../icons/copycode.gif" />Copy</span></th></tr><tr><td colspan="2"><pre xml:space="preserve">modelBuilder.Entity&lt; span&gt;Person&lt;().Property(p =&lt; p.SocialSecurityNumber).IsConcurrencyToken();</pre></td></tr></table></span></div><p>
          测试代码
        </p><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="Copy image" title="Copy image" src="../icons/copycode.gif" />Copy</span></th></tr><tr><td colspan="2"><pre xml:space="preserve">staticvoid Main(<span class="highlight-keyword">string</span>[] args)      
{            
<span class="highlight-keyword">var</span> person = <span class="highlight-keyword">new</span> Person            
{          
FirstName = <span class="highlight-literal">"Rowan"</span>,                
LastName = <span class="highlight-literal">"Miller"</span>,             
SocialSecurityNumber = <span class="highlight-number">12345678</span>        
};          
<span class="highlight-comment">//新增一条记录，保存到数据库中</span>
<span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> con = <span class="highlight-keyword">new</span> BreakAwayContext())      
{               
con.People.Add(person);              
con.SaveChanges();          
}         
<span class="highlight-keyword">var</span> firContext = <span class="highlight-keyword">new</span> BreakAwayContext();        
<span class="highlight-comment">//取第一条记录,并修改SocialSecurityNumber字段       </span>
<span class="highlight-comment">//先不保存</span>
<span class="highlight-keyword">var</span> p1 = firContext.People.FirstOrDefault();     
p1.SocialSecurityNumber = <span class="highlight-number">123</span>;          
<span class="highlight-comment">//再创建一个Context，同样取第一条记录，      </span>
<span class="highlight-comment">//修改SocialSecurityNumber字段并保存</span>
<span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> secContext = <span class="highlight-keyword">new</span> BreakAwayContext())        
{               
<span class="highlight-keyword">var</span> p2 = secContext.People.FirstOrDefault();          
p2.SocialSecurityNumber = <span class="highlight-number">456</span>;          
secContext.SaveChanges();          
}       
<span class="highlight-keyword">try</span>       
{               
firContext.SaveChanges();       
Console.WriteLine(<span class="highlight-literal">" 保存成功"</span>);            
}            
<span class="highlight-keyword">catch</span> (DbUpdateConcurrencyException ex)            
{             
Console.WriteLine(ex.Entries.First().Entity.GetType().Name + <span class="highlight-literal">" 保存失败"</span>);   
}      
Console.Read();      
}</pre></td></tr></table></span></div><p>
          分析一下EF执行的SQL：
        </p><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="Copy image" title="Copy image" src="../icons/copycode.gif" />Copy</span></th></tr><tr><td colspan="2"><pre xml:space="preserve">exec sp_executesql N'update [dbo].[People]<span class="highlight-keyword">set</span> [SocialSecurityNumber] = @<span class="highlight-number">0</span><span class="highlight-keyword">where</span> 
(([PersonId] = @<span class="highlight-number">1</span>) and ([SocialSecurityNumber] = @<span class="highlight-number">2</span>))<span class="highlight-literal">',N'</span>@<span class="highlight-number">0</span> <span class="highlight-keyword">int</span>,@<span class="highlight-number">1</span> <span class="highlight-keyword">int</span>,@<span class="highlight-number">2</span> <span class="highlight-keyword">int</span>',@<span class="highlight-number">0</span>=<span class="highlight-number">123</span>,@<span class="highlight-number">1</span>=<span class="highlight-number">1</span>,@<span class="highlight-number">2</span>=<span class="highlight-number">12345678</span></pre></td></tr></table></span></div><div class="alert"><table><tr><th><img src="../icons/alert_note.gif" title="Note" /> <b>Note</b></th></tr><tr><td><p>
            可以看到，EF将我们要并发控制的列SocialSecurityNumber也作为一个筛选条件，
            这样firContext保存的时候也会因为的数据库中SocialSecurityNumber值变了，
            取不到对应的记录而更新失败。
          </p></td></tr></table></div></div></div><div id="footer"><div class="footerLine"><img width="100%" height="3px" src="../icons/footer.gif" alt="Footer image" title="Footer image" /></div><A NAME="feedback"></A><span id="fb" class="feedbackcss"></span>
罗敏贵@版权所有，有问题请联系minguiluo@163.com<p />有关这个主题的评论请发邮件到
        <a id="HT_MailLink" href="mailto:minguiluo%40163.com?Subject=LCL User Guide">发送反馈</a><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title;
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script><p><a href="http://www.cnblogs.com/luomingui/category/279664.html" target="_blank">LCL User Guide</a></p></div></div></body></html>