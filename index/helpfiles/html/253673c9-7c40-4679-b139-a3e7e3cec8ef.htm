<html><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>领域仓库</title><meta name="Language" content="zh-cn" /><meta name="Microsoft.Help.Id" content="253673c9-7c40-4679-b139-a3e7e3cec8ef" /><meta name="Description" content="为了覆盖所有面向关系型数据库的对象持久化，LCL提供基本仓库接口， 并实现了Entity Framework和MongoDB仓库，使用者也可以根据自己的需要进行扩展和替换仓库。" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><link rel="stylesheet" type="text/css" href="../styles/Presentation.css" /><script type="text/javascript" src="../scripts/EventUtilities.js"> </script><script type="text/javascript" src="../scripts/SplitScreen.js"> </script><script type="text/javascript" src="../scripts/Dropdown.js"> </script><script type="text/javascript" src="../scripts/script_manifold.js"> </script><script type="text/javascript" src="../scripts/script_feedBack.js"> </script><script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script><script type="text/javascript" src="../scripts/CommonUtilities.js"> </script><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script></head><body><input type="hidden" id="userDataCache" class="userDataStyle" /><input type="hidden" id="hiddenScrollOffset" /><img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="Collapse image" title="Collapse image" /><img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="Expand Image" title="Expand Image" /><img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" /><img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" /><img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" /><img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" /><img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" alt="Copy image" title="Copy image" /><img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" alt="CopyHover image" title="CopyHover image" /><div id="header"><table id="topTable" cellspacing="0" cellpadding="0"><tr><td><span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0"><img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">Collapse All</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">Expand All</label> </span></td></tr></table><div id="devlangsMenu"><input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="CSharpCheckbox">C#</label><br /></div><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">LCL User Guide</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">领域仓库</span></td></tr><tr id="headerTableRow3"><td align="left"><span id="headfeedbackarea" class="feedbackhead"><a href="#" onclick="javascript:SubmitFeedback('minguiluo@163.com','LCL User Guide','','1.0.0.0','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback'); return false;">Send Feedback</a></span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" id="headerBottom"><img id="headerBottomImage" style="display: none;" src="../icons/gradient.gif" /></td></tr></table></div><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" /><span style="color: DarkGray">LCL User Guide </span><div class="introduction"><p>为了覆盖所有面向关系型数据库的对象持久化，LCL提供基本仓库接口，
            并实现了Entity Framework和MongoDB仓库，使用者也可以根据自己的需要进行扩展和替换仓库。</p><p>This topic contains the following sections.</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#DDD">领域仓库是什么？</a></li><li class="outlineSectionEntry"><a href="#ddd">Respository模式小结</a></li><li class="outlineSectionEntry"><a href="#ddd">Repository与Dal的区别</a></li><li class="outlineSectionEntry"><a href="#optionalAddress">如何设计领域仓库？</a></li><li class="outlineSectionEntry"><a href="#ddd">附 - 仓库/单元设计</a></li></ul></div><a name="DDD"> </a><h1 class="heading"><span onclick="ExpandCollapse(sectionToggleID0EFAAA)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggleID0EFAAA, event)" tabindex="0"><img id="sectionToggleID0EFAAA" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />领域仓库是什么？</span></h1><div id="sectionSectionID0EFAAA" class="section" name="collapseableSection"><p>Repository是一个独立的层，介于领域层与数据映射层（数据访问层）之间。
                它的存在让领域层感觉不到数据访问层的存在，它提供一个类似集合的接口提供给领域层进行领域对象的访问。
                Repository是仓库管理员，领域层需要什么东西只需告诉仓库管理员，由仓库管理员把东西拿给它，并不需要知道东西实际放在哪。</p><div class="mediaNear"><div class="caption">仓库UML</div><img alt="Repository" src="../media/Repository.png" /></div></div><a name="ddd"> </a><h1 class="heading"><span onclick="ExpandCollapse(sectionToggleID0EEAAA)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggleID0EEAAA, event)" tabindex="0"><img id="sectionToggleID0EEAAA" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Respository模式小结</span></h1><div id="sectionSectionID0EEAAA" class="section" name="collapseableSection"><p>Respository模式在示例中的实际目的小结一下</p><ul><li><p>Repository模式是架构模式，在设计架构时，才有参考价值；</p></li><li><p>Repository模式主要是封装数据查询和存储逻辑；</p></li><li><p>Repository模式实际用途：更换、升级ORM 引擎，不影响业务逻辑；</p></li><li><p>Repository模式能提高测试效率，单元测试时，用Mock对象代替实际的数据库存取，可以成倍地提高测试用例运行速度.</p></li></ul></div><a name="ddd"> </a><h1 class="heading"><span onclick="ExpandCollapse(sectionToggleID0EDAAA)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggleID0EDAAA, event)" tabindex="0"><img id="sectionToggleID0EDAAA" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Repository与Dal的区别</span></h1><div id="sectionSectionID0EDAAA" class="section" name="collapseableSection"><ul><li><p>Repository是DDD中的概念，强调Repository是受Domain驱动的，Repository中定义的功能要体现Domain的意图和约束，而Dal更纯粹的就是提  供数据访问的功能,并不严格受限于Business层。</p></li><li><p>使用Repository，隐含着一种意图倾向，就是 Domain需要什么我才提供什么，不该提供的功能就不要提供，一切都是以Domain的需求为核心；而使用Dal，其意图倾向在于我Dal层能使用的数 据库访问操作提供给Business层，你Business要用哪个自己选。换一个Business也可以用我这个Dal，一切是以我Dal能提供什么操 作为核心。</p></li></ul></div><a name="optionalAddress"> </a><h1 class="heading"><span onclick="ExpandCollapse(sectionToggleID0ECAAA)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggleID0ECAAA, event)" tabindex="0"><img id="sectionToggleID0ECAAA" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />如何设计领域仓库？</span></h1><div id="sectionSectionID0ECAAA" class="section" name="collapseableSection"><p>1. 我们将对实体的公共操作部分，提取为IRepository接口，比如常见的增加，删除等方法。如下代码：</p><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="Copy image" title="Copy image" src="../icons/copycode.gif" />Copy</span></th></tr><tr><td colspan="2"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IRepository&lt;TEntity&gt; <span class="highlight-keyword">where</span> TEntity : <span class="highlight-keyword">class</span>, IEntity
{
      IRepositoryContext Context { <span class="highlight-keyword">get</span>; }
      <span class="highlight-keyword">void</span> Create(TEntity entity);
      <span class="highlight-keyword">void</span> Delete(TEntity entity);
      <span class="highlight-keyword">void</span> Update(TEntity entity);
}
<span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IRepositoryContext : IUnitOfWork, IDisposable
{
    Guid ID { <span class="highlight-keyword">get</span>; }
    <span class="highlight-keyword">void</span> RegisterNew(<span class="highlight-keyword">object</span> obj);
    <span class="highlight-keyword">void</span> RegisterModified(<span class="highlight-keyword">object</span> obj);
    <span class="highlight-keyword">void</span> RegisterDeleted(<span class="highlight-keyword">object</span> obj);
} 

<span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IUnitOfWork
{
    <span class="highlight-keyword">bool</span> DistributedTransactionSupported { <span class="highlight-keyword">get</span>; }
    <span class="highlight-keyword">bool</span> Committed { <span class="highlight-keyword">get</span>; }
    <span class="highlight-keyword">void</span> Commit();
    <span class="highlight-keyword">void</span> Rollback();
}</pre></td></tr></table></span></div><p>2．下面我们实现一个泛型的类来具体实现上面的接口的方法。</p><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="Copy image" title="Copy image" src="../icons/copycode.gif" />Copy</span></th></tr><tr><td colspan="2"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">abstract</span> <span class="highlight-keyword">partial</span> <span class="highlight-keyword">class</span> Repository&lt;TEntity&gt; : IRepository&lt;TEntity&gt; <span class="highlight-keyword">where</span> TEntity : <span class="highlight-keyword">class</span>, IEntity
{
}
<span class="highlight-keyword">public</span> <span class="highlight-keyword">abstract</span> <span class="highlight-keyword">class</span> RepositoryContext :DisposableObject,IRepositoryContext 
{ 
}</pre></td></tr></table></span></div><p>3．扩展仓库需要实现以下接口。</p><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="Copy image" title="Copy image" src="../icons/copycode.gif" />Copy</span></th></tr><tr><td colspan="2"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> EntityFrameworkRepository&lt;TAggregateRoot&gt; : Repository&lt;TAggregateRoot&gt;
    <span class="highlight-keyword">where</span> TAggregateRoot : <span class="highlight-keyword">class</span>, IAggregateRoot
{
}
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> EntityFrameworkRepositoryContext : RepositoryContext, IEntityFrameworkRepositoryContext
{
}
<span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IEntityFrameworkRepositoryContext : IRepositoryContext
{
    DbContext Context { <span class="highlight-keyword">get</span>; }
}</pre></td></tr></table></span></div><p>4.上面我们实现是每个实体公共的操作，但是实际中每个实体都有符合自己业务的逻辑。我们单独定义另外一个接口，例如：</p><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="Copy image" title="Copy image" src="../icons/copycode.gif" />Copy</span></th></tr><tr><td colspan="2"><pre xml:space="preserve"><span class="highlight-keyword">interface</span> IBookRepository : IRepository&lt;Book&gt;
{
    IList&lt;Book&gt; GetAllByBookId(<span class="highlight-keyword">int</span> id);
}</pre></td></tr></table></span></div><p>5.最后该实体的Repository类实现如下：</p><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="Copy image" title="Copy image" src="../icons/copycode.gif" />Copy</span></th></tr><tr><td colspan="2"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> BookRepository : EntityFrameworkRepository&lt;Book&gt;, IBookRepository
{
      <span class="highlight-keyword">public</span> BookRepository(IRepositoryContext context)
            : <span class="highlight-keyword">base</span>(context)
        {

        }
    <span class="highlight-keyword">public</span> IList&lt;Book&gt; GetAllByBookId(<span class="highlight-keyword">int</span> id)
    {
        <span class="highlight-keyword">var</span> listbook = <span class="highlight-keyword">from</span> c <span class="highlight-keyword">in</span> context.GetTable&lt;Book&gt;()
                       <span class="highlight-keyword">where</span> c.BookId == id
                       <span class="highlight-keyword">select</span> c;
        <span class="highlight-keyword">return</span> listbook.ToList();
    }
}</pre></td></tr></table></span></div><p>6.使用Repository</p><p>使用Repository之前需要把Repo加入到IOC就可以向下面这样使用了</p><div class="code"><span codeLanguage="CSharp"><table width="100%" cellspacing="0" cellpadding="0"><tr><th>C# </th><th><span class="copyCode" onclick="CopyCode(this)" onkeypress="CopyCode_CheckKey(this, event)" onmouseover="ChangeCopyCodeIcon(this)" onmouseout="ChangeCopyCodeIcon(this)" tabindex="0"><img class="copyCodeImage" name="ccImage" align="absmiddle" alt="Copy image" title="Copy image" src="../icons/copycode.gif" />Copy</span></th></tr><tr><td colspan="2"><pre xml:space="preserve">ServiceLocator.Instance.Register&lt;IRepository&lt;User&gt;, EntityFrameworkRepository&lt;User&gt;&gt;();
 User customer = <span class="highlight-keyword">new</span> User
 {
     ID = Guid.NewGuid(),
     Password = <span class="highlight-literal">"123456"</span>,
     Code = <span class="highlight-literal">"admin"</span>,
     Name = <span class="highlight-literal">"管理员"</span>,
 };
 <span class="highlight-keyword">var</span> repository = RF.Concrete&lt;IUserRepository&gt;();
 repository.Create(customer);
 repository.Context.Commit();
 repository.Context.Dispose();</pre></td></tr></table></span></div></div><a name="ddd"> </a><h1 class="heading"><span onclick="ExpandCollapse(sectionToggleID0EBAAA)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(sectionToggleID0EBAAA, event)" tabindex="0"><img id="sectionToggleID0EBAAA" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />附 - 仓库/单元设计</span></h1><div id="sectionSectionID0EBAAA" class="section" name="collapseableSection"><p>
                    关于 Repository 的详细概念，见 P of EAA Catalog  的：《<a href="http://martinfowler.com/eaaCatalog/repository.html" target="_blank">Repository</a> 》。
                </p><p>
                    关于 Unit of Work 的详细概念，见 P of EAA Catalog  的：《<a href="http://martinfowler.com/eaaCatalog/unitOfWork.html" target="_blank">Unit of Work</a> 》。
                </p><p>
                    LCL仓库使用的是陈晴阳的代码：《<a href="http://www.cnblogs.com/daxnet/archive/2010/07/07/1772638.html" target="_blank">EntityFramework之领域驱动设计实践 - 仓储</a> 》。
                </p></div></div><div id="footer"><div class="footerLine"><img width="100%" height="3px" src="../icons/footer.gif" alt="Footer image" title="Footer image" /></div><A NAME="feedback"></A><span id="fb" class="feedbackcss"></span>
罗敏贵@版权所有，有问题请联系minguiluo@163.com<p />有关这个主题的评论请发邮件到
        <a id="HT_MailLink" href="mailto:minguiluo%40163.com?Subject=LCL User Guide">发送反馈</a><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title;
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script><p><a href="http://www.cnblogs.com/luomingui/category/279664.html" target="_blank">LCL User Guide</a></p></div></div></body></html>