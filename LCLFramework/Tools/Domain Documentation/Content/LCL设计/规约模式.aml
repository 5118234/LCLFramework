<?xml version="1.0" encoding="utf-8"?>
<topic id="b21ec496-3470-41d8-b959-5dd8ff43db56" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
      <section address="DDD">
            <title>规约模式</title>
            <content>
                <para>规约模式就是DDD引入用来解决以上问题的一种特殊的模式。规约是一种布尔断言，
                它表述了给定的对象是否满足当前约定的语义。</para>
                <para>
                为了实现复合断言，通常在设计中引入复合规约对象。这样做的好处是，
                可以充分利用规约的复合来实现复杂的规约组合以及规约树的遍历。不仅如此，
                在.NET 3.5引入Expression Tree以后，规约将有其特定的实现方式，这个我们在后面讨论。
                以下是一个经典的实现方式，注意ICompositeSpecification接口，
                它包含两个属性：Left和Right，ICompositeSpecification是继承于ISpecification接口的，
                而Left和Right本身也是ISpecification类型，于是，整个Specification的结构就可以看成是一种树状结构。
                </para>
              <mediaLink>
                    <caption>仓库UML</caption>
                    <image xlink:href="规约模式"/>
                </mediaLink>
            </content>
        </section>
  </developerConceptualDocument>
</topic>