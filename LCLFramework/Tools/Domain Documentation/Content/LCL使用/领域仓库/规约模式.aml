<?xml version="1.0" encoding="utf-8"?>
<topic id="b21ec496-3470-41d8-b959-5dd8ff43db56" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
      <section address="DDD">
            <title>规约模式</title>
            <content>
                <para>规约模式就是DDD引入用来解决以上问题的一种特殊的模式。规约是一种布尔断言，
                它表述了给定的对象是否满足当前约定的语义。</para>
                <para>
                为了实现复合断言，通常在设计中引入复合规约对象。这样做的好处是，
                可以充分利用规约的复合来实现复杂的规约组合以及规约树的遍历。不仅如此，
                在.NET 3.5引入Expression Tree以后，规约将有其特定的实现方式，这个我们在后面讨论。
                以下是一个经典的实现方式，注意ICompositeSpecification接口，
                它包含两个属性：Left和Right，ICompositeSpecification是继承于ISpecification接口的，
                而Left和Right本身也是ISpecification类型，于是，整个Specification的结构就可以看成是一种树状结构。
                </para>
              <mediaLink>
                    <caption>仓库UML</caption>
                    <image xlink:href="规约模式" style="width:834px; height:521px;" />
                </mediaLink>
            </content>
        </section>
        <section address="demo">
            <title>代码示例</title>
            <content>
                <code language="cs">
<![CDATA[
    /// <summary>
    /// 行政区域
    /// </summary>
    public partial class Xzqy : BaseTreeModel
    {
        /// <summary>
        /// 区划代码
        /// </summary>
        public string HelperCode { get; set; }
        /// <summary>
        /// 区划名称
        /// </summary>
        public string Name { get; set; }
        /// <summary>
        /// 区划介绍
        /// </summary>
        public string Intro { get; set; }
    }
    public List<Xzqy> GetXzqyChildList(Guid? pid)
    {
            if (pid == null) pid = Guid.Empty;
            ISpecification<Xzqy> spec = Specification<Xzqy>.Eval(p => p.ParentId == Guid.Empty);
            ISpecification<Xzqy> spec1 = Specification<Xzqy>.Eval(p => p.ParentId == pid);
            IEnumerable<Xzqy> list = this.FindAll(spec);
            if (pid != Guid.Empty)
            {
                list = this.FindAll(spec1);
            }
            return list.ToList();
     }
     
    public class DepartmentNameSpecifications : Specification<Xzqy>
    {
        string _depName;
        public DepartmentNameSpecifications(string depName)
        {
            _depName = depName;
        }
        public override Expression<Func<Department, bool>> GetExpression()
        {
            return exp => exp.Name.IndexOf(_depName) != 0;
        }
    }
    var list = RF.Concrete<IXzqyRepository>().FindAll(new DepartmentNameSpecifications("")).ToList();
]]>
                </code>
               <alert class="note">
                <para>在使用 Sql 查询时，必须保证：实体所有映射数据库的属性，在 Sql 中查询出的表格中都有对应的列。（这包括 Entity 基类的属性 Id。）</para>
            </alert>
            </content>
        </section>
  </developerConceptualDocument>
</topic>